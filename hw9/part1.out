Payton Shafer   CS458:HW9 Part 1 Output

OUTPUT:
-- specification ( G (i.hunger ->  F i.fork) &  G (v.hunger ->  F v.fork))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    i.hunger = FALSE
    i.fork = FALSE
    v.hunger = FALSE
    v.fork = FALSE
  -> Input: 1.2 <-
    _process_selector_ = i
    running = FALSE
    v.running = FALSE
    i.running = TRUE
  -> State: 1.2 <-
  -> Input: 1.3 <-
    _process_selector_ = v
    v.running = TRUE
    i.running = FALSE
  -> State: 1.3 <-
  -> Input: 1.4 <-
  -- Loop starts here
  -> State: 1.4 <-
    v.hunger = TRUE
  -> Input: 1.5 <-
    _process_selector_ = main
    running = TRUE
    v.running = FALSE
  -- Loop starts here
  -> State: 1.5 <-
  -> Input: 1.6 <-
  -- Loop starts here
  -> State: 1.6 <-
  -> Input: 1.7 <-
    _process_selector_ = i
    running = FALSE
    i.running = TRUE
  -- Loop starts here
  -> State: 1.7 <-
  -> Input: 1.8 <-
  -> State: 1.8 <-
    i.hunger = TRUE
  -> Input: 1.9 <-
  -> State: 1.9 <-
    i.fork = TRUE
  -> Input: 1.10 <-
    _process_selector_ = v
    v.running = TRUE
    i.running = FALSE
  -> State: 1.10 <-
  -> Input: 1.11 <-
    _process_selector_ = i
    v.running = FALSE
    i.running = TRUE
  -> State: 1.11 <-
    i.hunger = FALSE
  -> Input: 1.12 <-
  -> State: 1.12 <-
    i.fork = FALSE


MEANING OF OUTPUT:
1.1 - All false 

1.2 (IN) - Choose to run i
1.2 - No changes

1.3 (IN) - Choose to run v (Stop i)
1.3 - No changes

1.4 - v becomes hungery (Loop starts here)

1.5 (IN) - Stop running v
1.5 - No changes (Loop starts here)

1.6 - No changes

1.7 (IN) - Choose to run i 
1.7 - No changes (Loop starts here)

1.8 - i becomes hungry

1.9 - i picks up fork

1.10 (IN) - Choose to run v (Stop i)
1.10 - No changes

1.11 (IN) - Choose to run i (Stop v)
1.11 - i is no longer hungry

1.12 - i puts down fork

This means that that v will be hungery forever and never have the chance to eat.
v becomes hungery in state 1.4 then never has the chance to pick up the fork.
Every time the process selector chooses v, i has the fork so v can't do anything.
Thus v becomes hungry but never picks up the fork.